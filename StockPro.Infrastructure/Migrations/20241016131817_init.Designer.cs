// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StockPro.Infrastructure.Data;

#nullable disable

namespace StockPro.Infrastructure.Migrations
{
    [DbContext(typeof(StockProDataContext))]
    [Migration("20241016131817_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StockPro.Domain.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Complement")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("StockPro.Domain.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FantasyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("StockPro.Domain.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("StockPro.Domain.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AcquisitionCost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EquipmentModelId")
                        .HasColumnType("integer");

                    b.Property<int>("LocalId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TAG")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentModelId");

                    b.HasIndex("LocalId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("StockPro.Domain.Models.EquipmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EquipmentType")
                        .HasColumnType("text");

                    b.Property<int?>("EstimatedLifespan")
                        .HasColumnType("integer");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OperatingFrequency")
                        .HasColumnType("text");

                    b.Property<string>("OperatingVoltage")
                        .HasColumnType("text");

                    b.Property<string>("RecommendedMaintenanceInterval")
                        .HasColumnType("text");

                    b.Property<string>("TechnicalDocumentation")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("EquipmentModel");
                });

            modelBuilder.Entity("StockPro.Domain.Models.JobFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double?>("HourlyRate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TechnicalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TechnicalId")
                        .IsUnique();

                    b.ToTable("JobFunction");
                });

            modelBuilder.Entity("StockPro.Domain.Models.Local", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TAG")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Local");
                });

            modelBuilder.Entity("StockPro.Domain.Models.ServiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientFeedback")
                        .HasColumnType("text");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("ClientNotRegistered")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CodeServiceOrder")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Criticality")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EquipamentId")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentNotRegistered")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("EstimatedEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EstimatedStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("EstimatedValue")
                        .HasColumnType("double precision");

                    b.Property<int?>("LocalId")
                        .HasColumnType("integer");

                    b.Property<string>("LocalNotRegistered")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("RegisteredAsset")
                        .HasColumnType("boolean");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EquipamentId");

                    b.HasIndex("LocalId");

                    b.HasIndex("ServiceRequestId")
                        .IsUnique();

                    b.ToTable("ServiceOrder", (string)null);
                });

            modelBuilder.Entity("StockPro.Domain.Models.ServiceOrderTechnical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FunctionId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceOrderId")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("ServiceOrderId");

                    b.HasIndex("TechnicalId");

                    b.ToTable("ServiceOrderTechnicals", (string)null);
                });

            modelBuilder.Entity("StockPro.Domain.Models.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Criticality")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOccurrence")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("EquipamentId")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentNotRegistered")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("InactiveAsset")
                        .HasColumnType("boolean");

                    b.Property<int?>("LocalId")
                        .HasColumnType("integer");

                    b.Property<string>("LocalNotRegistered")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("RegisteredAsset")
                        .HasColumnType("boolean");

                    b.Property<int>("RequesterId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EquipamentId");

                    b.HasIndex("LocalId");

                    b.HasIndex("RequesterId");

                    b.ToTable("ServiceRequest", (string)null);
                });

            modelBuilder.Entity("StockPro.Domain.Models.Technical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Technical");
                });

            modelBuilder.Entity("StockPro.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Profile")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("StockPro.Domain.Models.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Theme")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPreference");
                });

            modelBuilder.Entity("StockPro.Domain.Models.WorkHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RealEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RealStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ServiceOrderTechnicalId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ServiceOrderTechnicalId");

                    b.ToTable("WorkHours");
                });

            modelBuilder.Entity("StockPro.Domain.Models.Address", b =>
                {
                    b.HasOne("StockPro.Domain.Models.Client", "Client")
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StockPro.Domain.Models.Contact", b =>
                {
                    b.HasOne("StockPro.Domain.Models.Client", "Client")
                        .WithMany("Contacts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StockPro.Domain.Models.Equipment", b =>
                {
                    b.HasOne("StockPro.Domain.Models.EquipmentModel", "EquipmentModel")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockPro.Domain.Models.Local", "Local")
                        .WithMany("Equipments")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentModel");

                    b.Navigation("Local");
                });

            modelBuilder.Entity("StockPro.Domain.Models.JobFunction", b =>
                {
                    b.HasOne("StockPro.Domain.Models.Technical", "Technical")
                        .WithOne("Function")
                        .HasForeignKey("StockPro.Domain.Models.JobFunction", "TechnicalId");

                    b.Navigation("Technical");
                });

            modelBuilder.Entity("StockPro.Domain.Models.ServiceOrder", b =>
                {
                    b.HasOne("StockPro.Domain.Models.Client", "Client")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockPro.Domain.Models.Equipment", "Equipment")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("EquipamentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockPro.Domain.Models.Local", "Local")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockPro.Domain.Models.ServiceRequest", "ServiceRequest")
                        .WithOne("ServiceOrder")
                        .HasForeignKey("StockPro.Domain.Models.ServiceOrder", "ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");

                    b.Navigation("Equipment");

                    b.Navigation("Local");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("StockPro.Domain.Models.ServiceOrderTechnical", b =>
                {
                    b.HasOne("StockPro.Domain.Models.JobFunction", "Function")
                        .WithMany("ServiceOrderTechnicals")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockPro.Domain.Models.ServiceOrder", "ServiceOrder")
                        .WithMany("ServiceOrderTechnicals")
                        .HasForeignKey("ServiceOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockPro.Domain.Models.Technical", "Technical")
                        .WithMany("ServiceOrderTechnicals")
                        .HasForeignKey("TechnicalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Function");

                    b.Navigation("ServiceOrder");

                    b.Navigation("Technical");
                });

            modelBuilder.Entity("StockPro.Domain.Models.ServiceRequest", b =>
                {
                    b.HasOne("StockPro.Domain.Models.Client", "Client")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockPro.Domain.Models.Equipment", "Equipment")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("EquipamentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockPro.Domain.Models.Local", "Local")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockPro.Domain.Models.User", "Requester")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Client");

                    b.Navigation("Equipment");

                    b.Navigation("Local");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("StockPro.Domain.Models.UserPreference", b =>
                {
                    b.HasOne("StockPro.Domain.Models.User", "User")
                        .WithOne("Preference")
                        .HasForeignKey("StockPro.Domain.Models.UserPreference", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockPro.Domain.Models.WorkHours", b =>
                {
                    b.HasOne("StockPro.Domain.Models.ServiceOrderTechnical", "ServiceOrderTechnical")
                        .WithMany("WorkHours")
                        .HasForeignKey("ServiceOrderTechnicalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ServiceOrderTechnical");
                });

            modelBuilder.Entity("StockPro.Domain.Models.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");

                    b.Navigation("ServiceOrders");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("StockPro.Domain.Models.Equipment", b =>
                {
                    b.Navigation("ServiceOrders");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("StockPro.Domain.Models.EquipmentModel", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("StockPro.Domain.Models.JobFunction", b =>
                {
                    b.Navigation("ServiceOrderTechnicals");
                });

            modelBuilder.Entity("StockPro.Domain.Models.Local", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("ServiceOrders");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("StockPro.Domain.Models.ServiceOrder", b =>
                {
                    b.Navigation("ServiceOrderTechnicals");
                });

            modelBuilder.Entity("StockPro.Domain.Models.ServiceOrderTechnical", b =>
                {
                    b.Navigation("WorkHours");
                });

            modelBuilder.Entity("StockPro.Domain.Models.ServiceRequest", b =>
                {
                    b.Navigation("ServiceOrder");
                });

            modelBuilder.Entity("StockPro.Domain.Models.Technical", b =>
                {
                    b.Navigation("Function");

                    b.Navigation("ServiceOrderTechnicals");
                });

            modelBuilder.Entity("StockPro.Domain.Models.User", b =>
                {
                    b.Navigation("Preference");

                    b.Navigation("ServiceRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
